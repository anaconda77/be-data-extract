# .github/workflows/deploy-to-oci.yml

name: OCI Functions CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # CI Job: Pull Request 시에만 실행되는 코드 검증 작업
  ci:
    name: Continuous Integration (Test & Lint)
    # 이 작업은 pull_request 이벤트일 때만 실행됩니다.
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Dependencies
        working-directory: ./src/finn_python_server/cloud
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Lint with flake8
        working-directory: ./src/finn_python_server/cloud
        run: |
          pip install flake8
          # flake8으로 코드 스타일을 검사하고, 오류가 있으면 작업을 중단시킵니다.
          echo "Running linter..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # 필요하다면 여기에 다른 테스트 코드를 추가할 수 있습니다. (예: pytest)

  # CD Job: main 브랜치에 Push(Merge) 시에만 실행되는 배포 작업
  deploy:
    name: Continuous Deployment (Deploy to OCI)
    # 이 작업은 main 브랜치로 push 이벤트가 발생했을 때만 실행됩니다.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up OCI CLI Configuration
        # GitHub Secret을 사용하여 OCI 인증 파일을 생성합니다.
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
          echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
          echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
          echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
      
      - name: Install and Configure Fn CLI
        run: |
          # Fn CLI 설치
          curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh
          # Fn 컨텍스트 설정
          # fn use context default
          # fn update context oracle.compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }}
          # fn update context api-url https://functions.${{ secrets.OCI_REGION }}.oraclecloud.com
          # fn update context registry ${{ secrets.OCIR_REGISTRY_PATH }}
          # 모든 fn 명령어에 --verbose 옵션을 추가하여 상세 로그를 출력합니다.
          fn --verbose use context default
          fn --verbose update context oracle.compartment-id ${{ secrets.OCI_COMPARTMENT_OCID }}
          fn --verbose update context api-url https://functions.${{ secrets.OCI_REGION }}.oraclecloud.com
          fn --verbose update context registry ${{ secrets.OCIR_REGISTRY_PATH }}

          # 디버깅을 위해 현재 컨텍스트로 앱 목록을 조회하는 명령어를 추가합니다.
          # 만약 여기서 권한/설정 오류가 발생하면, 배포까지 갈 필요 없이 문제를 진단할 수 있습니다.
          echo "--- Running 'fn list apps' for debugging ---"
          fn --verbose list apps
      - name: Deploy to OCI Functions
        working-directory: ./src/finn_python_server/cloud
        run: fn deploy --app ${{ secrets.OCI_APP_NAME }}