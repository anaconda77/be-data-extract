# .github/workflows/deploy-to-oci.yml

name: OCI Functions CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # CI Job: Pull Request 시 코드 검증
  ci:
    name: Continuous Integration (Test & Lint)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    # ⭐ [수정] 이 작업(job)의 모든 run 스텝이 실행될 기본 디렉토리 설정
    defaults:
      run:
        working-directory: ./src/finn_python_server/cloud

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # CD Job: main 브랜치에 Push(Merge) 시 배포
  deploy:
    name: Continuous Deployment (Deploy to OCI)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    # ⭐ [수정] 이 작업(job)의 모든 run 스텝이 실행될 기본 디렉토리 설정
    defaults:
      run:
        working-directory: ./src/finn_python_server/cloud
        
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up OCI CLI Configuration
        # 이 스텝은 특정 폴더와 무관하게 홈 디렉토리에 파일을 생성하므로 working-directory 영향을 받지 않습니다.
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
          echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
          echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
          echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem

      - name: Log in to OCI Container Registry
        # 이 스텝도 특정 폴더와 무관한 전역 로그인 명령어입니다.
        run: echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login ${{ secrets.OCI_REGION }}.ocir.io -u '${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_USER_EMAIL }}' --password-stdin

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ secrets.OCIR_REGISTRY_PATH }}:${{ github.sha }}"
          echo "Building and pushing image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update OCI Function
        run: oci fn function update --function-id ${{ secrets.OCI_FUNCTION_OCID }} --image ${{ env.IMAGE_TAG }}